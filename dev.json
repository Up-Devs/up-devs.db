{"meta":{"generator":"0.10.0","format":20,"date":1635715312374},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://updevs-db.js.org\"><img src=\"https://user-images.githubusercontent.com/77716705/131206307-0840de3c-a3f7-48e8-9076-f97d163055c3.png\" width=\"546\" alt=\"up-devs.db\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://www.npmjs.com/package/up-devs.db\"><img src=\"https://img.shields.io/npm/v/up-devs.db.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/up-devs.db\"><img src=\"https://img.shields.io/npm/dt/up-devs.db.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://github.com/Up-Devs/up-devs.db/issues\"><img src=\"https://img.shields.io/github/issues/Up-Devs/up-devs.db\" alt=\"Github issues\"></a>\n    <a href=\"https://github.com/Up-Devs/up-devs.db/pulls\"><img src=\"https://img.shields.io/github/issues-pr/Up-Devs/up-devs.db\" alt=\"Github pull requests\" /></a>\n    <a href=\"https://github.com/Up-Devs/up-devs.db/actions\"><img src=\"https://img.shields.io/github/workflow/status/Up-Devs/up-devs.db/Node.js Package\" alt=\"Github build status\" /></a>\n    <a href=\"https://github.com/Up-Devs/up-devs.db/blob/main/LICENSE\"><img src=\"https://img.shields.io/github/license/Up-Devs/up-devs.db\" alt=\"Github license\" /></a>\n    <a href=\"https://www.codefactor.io/repository/github/Up-Devs/up-devs.db/overview\"><img src=\"https://www.codefactor.io/repository/github/Up-Devs/up-devs.db/badge\" alt=\"CodeFactor rating\"></a>\n  </p>\n</div>\n\nUp-Devs.DB is an useful data-base for your projects. Save your datas in JSON files and MongoDB!\n\n* Easy to use!\n* Has extra methods/properties!\n* Similar to [Quick.DB](https://www.npmjs.com/package/quick.db)!\n\n## Get Started\n\n* Install the package\n```sh-session\nnpm i up-devs.db\n```\n\n* Read our [docs](https://updevs-db.js.org)\n\n## Example\n\n```js\nconst { MongoDB, JsonDB } = require('up-devs.db');\nconst db = new MongoDB('mongodb+srv://up-devs/updevs.db')\n// or\nconst db = new JsonDB('updevs-db')\n\n// Setting an object to this database.\ndb.set('countries', { list: ['Turkey'] }) // 'countries' data: { list: 'Turkey' }\n\n// Pushing an element to this data.\ndb.push('countries.list', 'USA') // 'countries' data: { list: ['Turkey', 'USA'] }\n\n// Adding to a number to an object.\ndb.add('countries.count', 206) // 'countries' data: { list: ['Turkey', 'USA'], count: 206  }\n\n// Fetching those datas.\ndb.fetch('countries.list') // 'countries' data: ['Turkey', 'USA']\ndb.get('countries.count') // 'countries' data: 206\n```\n\n## Support\nYou can get support for this module in our [<img src=\"https://user-images.githubusercontent.com/77716705/130312581-8e3406be-0552-43ce-b550-0b444462e15e.png\" height=\"15\" width=\"20\" alt=\"Discord logo\"> Discord server](https://discord.gg/PhW2XJa2yy)\n\n<div align=\"center\">\nMade by <a href=\"https://github.com/Up-Devs\"><img src=\"https://user-images.githubusercontent.com/77716705/131206350-6c6e7c66-8fde-43a7-aff7-217d5736d887.png\" height=\"17\" width=\"17\" alt=\"Up Devs\"> Up Devsâ„¢</a>\n</div>\n","path":"README.md"}}}},"classes":[{"name":"JsonDB","description":"Stores values in a json file.","construct":{"name":"JsonDB","description":"Creates a Json database.","params":[{"name":"dbName","description":"The file name for this database.","type":[[["string"]]]},{"name":"options","description":"Json database options.","optional":true,"default":"{}","type":[[["JsonDBOptions"]]]}]},"props":[{"name":"path","description":"This data-base's location path.","access":"private","type":[[["string"]]],"meta":{"line":81,"file":"JsonDB.js","path":"src/base"}},{"name":"name","description":"This databases's name.","type":[[["string"]]],"meta":{"line":91,"file":"JsonDB.js","path":"src/base"}},{"name":"size","description":"This data-base's key size.","type":[[["number"]]],"meta":{"line":97,"file":"JsonDB.js","path":"src/base"}},{"name":"options","description":"This database's options.","type":[[["JsonDBOptions"]]],"meta":{"line":103,"file":"JsonDB.js","path":"src/base"}}],"methods":[{"name":"set","description":"Sets a data to this database.","examples":["//Setting a string\rdb.set(\"foo\", \"bar\");\r\r//Setting an object\rdb.set(\"info\", {\rname: \"Josh\",\rage: 16\r})"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]},{"name":"value","description":"The value that will be set.","type":[[["any"]]]}],"returns":[[["DBData"]]],"meta":{"line":121,"file":"JsonDB.js","path":"src/base"}},{"name":"get","description":"Gets a data that was set to this database before.","examples":["//Get the 'playedBefore' value\rdb.get(\"playedBefore\")\r\r//Get the 'playedBefore' value (with a user specified)\rconst user = 'Up Devs'\rdb.get(`playedBefore.${user}`)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"returns":[[["DBData"]]],"meta":{"line":145,"file":"JsonDB.js","path":"src/base"}},{"name":"fetch","description":"Fetches a data that was set to this database before.","examples":["//Fetch the 'weapon' value\rdb.fetch(\"weapon\")\r\r//Fetch the 'weapon' value (with a weapon specified)\rconst weapon = 'rifle'\rdb.fetch(`weapon.${weapon}`)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"returns":{"types":[[["any"]]],"description":"Value that was set with this key."},"meta":{"line":167,"file":"JsonDB.js","path":"src/base"}},{"name":"exists","description":"Checks if a value with this key exists.","examples":["//Checks if exists\rdb.exists(\"ourLives\")"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":179,"file":"JsonDB.js","path":"src/base"}},{"name":"has","description":"Checks if this database has this key.","examples":["//Checks if this database has this key\rdb.has(\"goodVibes\")"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":191,"file":"JsonDB.js","path":"src/base"}},{"name":"all","description":"Returns all the database data in an array","examples":["//Returnes all database data\rdb.all()\r\r//Returnes 8 of the database data\rdb.all(8)"],"params":[{"name":"limit","description":"Limit for the database data that will be returned","optional":true,"default":"'all'","type":[[["number"]]]}],"returns":[[["Array","<"],["DBData",">"]]],"meta":{"line":206,"file":"JsonDB.js","path":"src/base"}},{"name":"fetchAll","description":"Fetches all the database data in an array","examples":["//Returnes all database data\rdb.fetchAll().then(data => {\r\r//...\r\r})\r\r//Fetches 8 of the database data\rdb.fetchAll(8).then(data => {\r\r//...\r\r})"],"params":[{"name":"limit","description":"Limit for the database data that will be returned","optional":true,"default":"'all'","type":[[["number"]]]}],"returns":[[["Promise","<"],["Array","<"],["DBData",">>"]]],"meta":{"line":239,"file":"JsonDB.js","path":"src/base"}},{"name":"toJSON","description":"Returnes a JSON file that includes every single key in this database.","examples":["//Returnes all database data in a JSON file\rdb.toJSON()\r\r//Returnes 8 of the database data in a JSON file\rdb.toJSON(8)"],"params":[{"name":"limit","description":"Limit for the database data that will be returned","optional":true,"default":"'all'","type":[[["number"]]]}],"returns":[[["Object"]]],"meta":{"line":254,"file":"JsonDB.js","path":"src/base"}},{"name":"delete","description":"Deletes a data from this database.","examples":["//Deletes gamerProfile data\rdb.delete(\"gamerProfile\")\r\r//Deletes gamerProfile data (with player specified)\rconst player = 'Ben'\rdb.delete(`gamerProfile.${player}`)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"returns":[[["JsonDB"]]],"meta":{"line":282,"file":"JsonDB.js","path":"src/base"}},{"name":"deleteAll","description":"Deletes every single data from this database.","examples":["//Deletes every single data\rdb.deleteAll()"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":301,"file":"JsonDB.js","path":"src/base"}},{"name":"type","description":"Returns the type of this data.","examples":["//Get the type of humans data\rdb.type('humans')"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":315,"file":"JsonDB.js","path":"src/base"}},{"name":"push","description":"Pushes a value to this data.","examples":["//Pushes a string to the members data\rdb.push(\"members\", \"Arthur\");\r\r//Pushes a number to the members data\rdb.push(\"members\", 102);\r\r//Pushes an object to the members data\rdb.push(\"members\", {\rname: \"Arthur\"\rmemberCount: 102\r});"],"params":[{"name":"key","description":"The key for this value to push.","type":[[["string"]]]},{"name":"value","description":"The value to push.","type":[[["any"]]]}],"returns":[[["DBData"]]],"meta":{"line":340,"file":"JsonDB.js","path":"src/base"}},{"name":"pull","description":"Pulls an item from this array typed data.","examples":["//Pulls a string from the members data\rdb.pull(\"members\", \"Arthur\");\r\r//Pulls a number from the members data\rdb.pull(\"members\", 102);\r\r//Pulls an object from the members data\rdb.pull(\"members\", {\rname: \"Arthur\"\rmemberCount: 102\r});"],"params":[{"name":"key","description":"The key for this value to pull from.","type":[[["string"]]]},{"name":"value","description":"The value to pull.","type":[[["any"]]]},{"name":"multiple","description":"Pull multiple items?","default":false,"type":[[["boolean"]]]}],"returns":[[["DBData"]]],"meta":{"line":381,"file":"JsonDB.js","path":"src/base"}},{"name":"valueArray","description":"Returnes all the values in an array","examples":["//Returnes all the values in an array\rdb.valueArray();"],"returns":[[["Array","<"],["any",">"]]],"meta":{"line":419,"file":"JsonDB.js","path":"src/base"}},{"name":"keyArray","description":"Returnes all the keys in an array","examples":["//Returnes all the keys in an array\rdb.keyArray();"],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":431,"file":"JsonDB.js","path":"src/base"}},{"name":"math","description":"Can't solves your math problems, but can calculate/add/remove numbers from this value.","examples":["//Adds 238 to the pencil value\rdb.math(\"pencil\", \"+\", 238)\r\r//Subtracts 1 from the issues value\rdb.substr(\"issues\", \"-\", 1)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]},{"name":"operator","description":"One of the math operator for the calculation.","type":[[["ConstantsMathOperator"]]]},{"name":"value","description":"The value for the math calculation.","type":[[["number"]],[["string"]]]}],"returns":[[["any"]]],"meta":{"line":449,"file":"JsonDB.js","path":"src/base"}},{"name":"add","description":"Adds a value to this value.","examples":["//Adds 238 to the pencil value\rdb.add(\"pencil\", 238)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]},{"name":"value","description":"The value that will be added.","type":[[["number"]],[["string"]]]}],"returns":[[["any"]]],"meta":{"line":519,"file":"JsonDB.js","path":"src/base"}},{"name":"subtract","description":"Subtracts value from this value.","examples":["//Subtracts 1 from the issues value\rdb.subtract(\"issues\", 1)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]},{"name":"value","description":"The value that will be subtracted.","type":[[["number"]],[["string"]]]}],"returns":[[["any"]]],"meta":{"line":532,"file":"JsonDB.js","path":"src/base"}},{"name":"includes","description":"Searches for a key in this database includes this.","examples":["//Searches for: updev.db\rdb.includes(\"updev.db\")"],"params":[{"name":"keywords","description":"The key (or keywords) to search.","type":[[["string"]]]}],"returns":[[["Array","<"],["DBData",">"]]],"meta":{"line":544,"file":"JsonDB.js","path":"src/base"}},{"name":"startsWith","description":"Searches for a key in this database starts with this.","examples":["//Searches for: updev.db\rdb.startsWith(\"up\")"],"params":[{"name":"keywords","description":"The key (or keywords) to search.","type":[[["string"]]]}],"returns":[[["Array","<"],["DBData",">"]]],"meta":{"line":559,"file":"JsonDB.js","path":"src/base"}},{"name":"filter","description":"Filters this database.","examples":["//Filters with a function.\rdb.filter((element) => element.key.includes(key));"],"params":[{"name":"filter","description":"The filter function for this filter.","type":[[["function"]]]}],"returns":[[["Array"]],[["Array","<"],["DBData",">"]]],"meta":{"line":574,"file":"JsonDB.js","path":"src/base"}},{"name":"sort","description":"Sorts this database.","examples":["//Sorts with a function.\rdb.sort((a, b) => b.value < a.value);"],"params":[{"name":"sort","description":"The sorting function for this sorting.","type":[[["function"]]]}],"returns":[[["Array","<"],["DBData",">"]]],"meta":{"line":588,"file":"JsonDB.js","path":"src/base"}},{"name":"destroy","description":"Throw a atom bomb into this database and destroy it.","returns":[[["void"]]],"meta":{"line":598,"file":"JsonDB.js","path":"src/base"}},{"name":"exportToQuickDB","description":"This method exports **JsonDB** data to **Quick.db**","examples":["//Exports to Quick.db\rdb.exportToQuickDB(QuickDB)"],"params":[{"name":"QuickDB","description":"Quick.db database (class)","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":611,"file":"JsonDB.js","path":"src/base"}},{"name":"_eval","description":"Eval this database and do whatever you want. You can use `this` keyword.","examples":["//Consoles every single data\rdb._eval(\"console.log(this.all())\")"],"params":[{"name":"code","description":"The code to eval","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":630,"file":"JsonDB.js","path":"src/base"}}],"events":[{"name":"error","description":"Emitted whenever an error is returned.","params":[{"name":"error","description":"The error message which was emitted.","type":[[["Error"]]]},{"name":"database","description":"The database that this event was emitted.","type":[[["JsonDB"]]]}],"meta":{"line":75,"file":"Constants.js","path":"src/util"}},{"name":"debug","description":"Emitted whenever a debug event happens.","params":[{"name":"message","description":"The debug message which was emitted.","type":[[["string"]]]},{"name":"database","description":"The database that this event was emitted.","type":[[["JsonDB"]]]}],"meta":{"line":86,"file":"Constants.js","path":"src/util"}}],"meta":{"line":17,"file":"JsonDB.js","path":"src/base"}},{"name":"MongoBase","description":"Creates a Mongo database.\rUsed by {@link MongoDB} class. **Don't use it yourself!**","construct":{"name":"MongoBase","description":"Creates a Mongo database.\rUsed by {@link MongoDB} class. **Don't use it yourself!**","params":[{"name":"mongoURL","description":"The Mongo url for this base.","type":[[["string"]]]},{"name":"connectionOptions","description":"The mongoose options for this base.","type":[[["Object"]]]}]},"props":[{"name":"options","description":"Mongoose connection options","type":[[["ConnectionOptions"]]],"meta":{"line":39,"file":"MongoBase.js","path":"src/base"}},{"name":"connection","description":"Returns mongodb connection","type":[[["MongooseConnection"]]],"meta":{"line":45,"file":"MongoBase.js","path":"src/base"}},{"name":"readyAt","description":"Timestamp when database became ready","type":[[["Date"]]],"meta":{"line":55,"file":"MongoBase.js","path":"src/base"}},{"name":"url","description":"Returns this database's Mongo url.","type":[[["string"]]],"meta":{"line":97,"file":"MongoBase.js","path":"src/base"}},{"name":"state","description":"Returns this database's connection state.","type":[[["MongoConnectionState"]]],"meta":{"line":105,"file":"MongoBase.js","path":"src/base"}}],"methods":[{"name":"_create","description":"Creates a MongoDB connection for this base.","returns":[[["MongooseConnection"]]],"meta":{"line":65,"file":"MongoBase.js","path":"src/base"}},{"name":"_destroyDatabase","description":"Destroys this database.","returns":[[["void"]]],"meta":{"line":86,"file":"MongoBase.js","path":"src/base"}}],"meta":{"line":14,"file":"MongoBase.js","path":"src/base"}},{"name":"MongoDB","description":"Stores values in a Mongo database.","construct":{"name":"MongoDB","description":"Creates a Mongo database.","params":[{"name":"mongoURL","description":"The Mongo url for this database.","optional":true,"default":"none","type":[[["string"]]]},{"name":"name","description":"The Mongo model name for this database.","optional":true,"default":"none","type":[[["string"]]]},{"name":"options","description":"Mongo database options.","optional":true,"default":"{}","type":[[["MongoDBOptions"]]]}]},"props":[{"name":"schema","description":"The model for this database.","type":[[["MongooseDocument"]]],"meta":{"line":41,"file":"MongoDB.js","path":"src/base"}},{"name":"name","description":"This database's name.","readonly":true,"type":[[["string"]]],"meta":{"line":48,"file":"MongoDB.js","path":"src/base"}},{"name":"options","description":"This database's options.","type":[[["MongoDBOptions"]]],"meta":{"line":54,"file":"MongoDB.js","path":"src/base"}},{"name":"uptime","description":"This database's uptime duration in miliseconds.","type":[[["number"]]],"meta":{"line":60,"file":"MongoDB.js","path":"src/base"}}],"methods":[{"name":"set","description":"Sets a data to this database.","examples":["//Setting a string\rdb.set(\"foo\", \"bar\");\r\r//Setting an object\rdb.set(\"info\", {\rname: \"Josh\",\rage: 16\r})"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]},{"name":"value","description":"The value that will be set.","type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":78,"file":"MongoDB.js","path":"src/base"}},{"name":"delete","description":"Deletes a data from this database.","examples":["//Deletes gamerProfile data\rdb.delete(\"gamerProfile\")\r\r//Deletes gamerProfile data (with player specified)\rconst player = 'Ben'\rdb.delete(`gamerProfile.${player}`)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":117,"file":"MongoDB.js","path":"src/base"}},{"name":"exists","description":"Checks if a value with this key exists.","examples":["//Checks if exists\rdb.exists(\"ourLives\")"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":145,"file":"MongoDB.js","path":"src/base"}},{"name":"has","description":"Checks if this database has this key.","examples":["//Checks if this database has this key\rdb.has(\"goodVibes\")"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":168,"file":"MongoDB.js","path":"src/base"}},{"name":"get","description":"Gets a data that was set to this database before.","examples":["//Get the 'playedBefore' value\rdb.get(\"playedBefore\")\r\r//Get the 'playedBefore' value (with a user specified)\rconst user = 'Up Devs'\rdb.get(`playedBefore.${user}`)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":184,"file":"MongoDB.js","path":"src/base"}},{"name":"fetch","description":"Fetches a data that was set to this database before.","examples":["//Fetch the 'weapon' value\rdb.fetch(\"weapon\")\r\r//Fetch the 'weapon' value (with a weapon specified)\rconst weapon = 'rifle'\rdb.fetch(`weapon.${weapon}`)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Value that was set with this key."},"meta":{"line":211,"file":"MongoDB.js","path":"src/base"}},{"name":"all","description":"Returns all the database data in an array","examples":["//Returnes all database data\rdb.all()\r\r//Returnes 8 of the database data\rdb.all(8)"],"params":[{"name":"limit","description":"Limit for the database data that will be returned.","optional":true,"default":"'all'","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["DBData",">>"]]],"meta":{"line":226,"file":"MongoDB.js","path":"src/base"}},{"name":"fetchAll","description":"Fetches all the database data in an array","examples":["//Returnes all database data\rdb.fetchAll().then(data => {\r\r//...\r\r})\r\r//Fetches 8 of the database data\rdb.fetchAll(8).then(data => {\r\r//...\r\r})"],"params":[{"name":"limit","description":"Limit for the database data that will be returned.","optional":true,"default":"'all'","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["DBData",">>"]]],"meta":{"line":253,"file":"MongoDB.js","path":"src/base"}},{"name":"deleteAll","description":"Deletes every single data from this database.","examples":["//Deletes every single data\rdb.deleteAll()"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":265,"file":"MongoDB.js","path":"src/base"}},{"name":"math","description":"Can't solves your math problems, but can calculate/add/remove numbers from this value.","examples":["//Adds 238 to the pencil value\rdb.math(\"pencil\", \"+\", 238)\r\r//Subtracts 1 from the issues value\rdb.substr(\"issues\", \"-\", 1)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]},{"name":"operator","description":"One of the math operator for the calculation.","type":[[["MathOperator"]]]},{"name":"value","description":"The value for the math calculation.","type":[[["number"]],[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":286,"file":"MongoDB.js","path":"src/base"}},{"name":"add","description":"Adds a value to this value.","examples":["//Adds 238 to the pencil value\rdb.add(\"pencil\", 238)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]},{"name":"value","description":"The value that will be added.","type":[[["number"]],[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":356,"file":"MongoDB.js","path":"src/base"}},{"name":"subtract","description":"Subtracts value from this value.","examples":["//Subtracts 1 from the issues value\rdb.substr(\"issues\", 1)"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]},{"name":"value","description":"The value that will be subtracted.","type":[[["number"]],[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":369,"file":"MongoDB.js","path":"src/base"}},{"name":"export","description":"Exports the data to json file","examples":["db.export(\"database.json\", \"./\").then(path => {\r    console.log(`File exported to ${path}`);\r});"],"params":[{"name":"fileName","description":"File name.","default":"database","type":[[["string"]]]},{"name":"path","description":"File path","default":"./","type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":382,"file":"MongoDB.js","path":"src/base"}},{"name":"import","description":"Imports datas from other sources to this database.\r\r<warn>You should set `useUnique` to `true` in order to avoid duplicate documents.</warn>","examples":["//Imports from Quick.db to MongoDB\rconst data = QuickDB.all();\rdb.import(data);"],"params":[{"name":"data","description":"The data array to be imported.","type":[[["Array"]]]},{"name":"options","description":"MongoDB importing options.","type":[[["object"]]]},{"name":"options.validate","description":"Choice for importing the valid documents only.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.unique","description":"Choice for importing unique datas.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":411,"file":"MongoDB.js","path":"src/base"}},{"name":"disconnect","description":"Disconnects this database.","examples":["//Disconnecting...\rdb.disconnect();"],"returns":[[["void"]]],"meta":{"line":440,"file":"MongoDB.js","path":"src/base"}},{"name":"connect","description":"Creates a database connection for this database.","params":[{"name":"url","description":"The Mongo url for this database.","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":450,"file":"MongoDB.js","path":"src/base"}},{"name":"_read","description":"This database's read latency.","access":"private","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":460,"file":"MongoDB.js","path":"src/base"}},{"name":"_write","description":"This database's write latency.","access":"private","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":472,"file":"MongoDB.js","path":"src/base"}},{"name":"fetchLatency","description":"Fetches read and write latency of this database in miliseconds.","examples":["const ping = await db.fetchLatency();\rconsole.log(\"Read: \", ping.read);\rconsole.log(\"Write: \", ping.write);\rconsole.log(\"Average: \", ping.average);"],"async":true,"returns":[[["Promise","<"],["ConstantsDatabaseLatency",">"]]],"meta":{"line":487,"file":"MongoDB.js","path":"src/base"}},{"name":"ping","description":"Fetches read and write latency of this database in miliseconds.","examples":["const ping = await db.fetchLatency();\rconsole.log(\"Read: \", ping.read);\rconsole.log(\"Write: \", ping.write);\rconsole.log(\"Average: \", ping.average);"],"async":true,"returns":[[["Promise","<"],["ConstantsDatabaseLatency",">"]]],"meta":{"line":504,"file":"MongoDB.js","path":"src/base"}},{"name":"startsWith","description":"Searches for a key in this database starts with this.","examples":["//Searches for: updev.db\rdb.startsWith(\"up\")"],"params":[{"name":"keywords","description":"The key (or keywords) to search.","type":[[["string"]]]},{"name":"options","description":"Filtering options.","type":[[["Object"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["ConstantsMongoData",">>"]]],"meta":{"line":517,"file":"MongoDB.js","path":"src/base"}},{"name":"type","description":"Returns the type of this data.","examples":["//Get the type of humans data\rdb.type('humans')"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<("],["string","|"],["number","|"],["bigint","|"],["boolean","|"],["symbol","|"],["void","|"],["Object","|"],["function","()|"],["Array",")>"]]],"meta":{"line":532,"file":"MongoDB.js","path":"src/base"}},{"name":"keyArray","description":"Returnes all the keys in an array","examples":["//Returnes all the keys in an array\rdb.keyArray();"],"async":true,"returns":[[["Promise","<"],["Array","<"],["string",">>"]]],"meta":{"line":546,"file":"MongoDB.js","path":"src/base"}},{"name":"valueArray","description":"Returnes all the values in an array","examples":["//Returnes all the values in an array\rdb.valueArray();"],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":558,"file":"MongoDB.js","path":"src/base"}},{"name":"push","description":"Pushes a value to this data.","examples":["//Pushes a string to the members data\rdb.push(\"members\", \"Arthur\");\r\r//Pushes a number to the members data\rdb.push(\"members\", 102);\r\r//Pushes an object to the members data\rdb.push(\"members\", {\rname: \"Arthur\"\rmemberCount: 102\r});"],"params":[{"name":"key","description":"The key for this value to push.","type":[[["string"]]]},{"name":"value","description":"The value to push.","type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":581,"file":"MongoDB.js","path":"src/base"}},{"name":"pull","description":"Pulls an item from this array typed data.","examples":["//Pulls a string from the members data\rdb.pull(\"members\", \"Arthur\");\r\r//Pulls a number from the members data\rdb.pull(\"members\", 102);\r\r//Pulls an object from the members data\rdb.pull(\"members\", {\rname: \"Arthur\"\rmemberCount: 102\r});"],"params":[{"name":"key","description":"The key for this value to pull from.","type":[[["string"]]]},{"name":"value","description":"The value to pull.","type":[[["any"]]]},{"name":"multiple","description":"Pull multiple items?","default":false,"type":[[["boolean"]]]}],"async":true,"returns":[[["DBData"]]],"meta":{"line":612,"file":"MongoDB.js","path":"src/base"}},{"name":"entries","description":"Returns the entry count of this database.","examples":["//Returns the enrty count\rconst entries = await db.entries();\rconsole.log(`Entries: ${entries}`);"],"async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":648,"file":"MongoDB.js","path":"src/base"}},{"name":"random","description":"Returns random entry from the database","examples":["const random = await db.random();\rconsole.log(random);"],"params":[{"name":"n","description":"Number entries to return","default":1,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":659,"file":"MongoDB.js","path":"src/base"}},{"name":"createModel","description":"Creates a new model (which is the same as this database).","params":[{"name":"name","description":"The new model name.","type":[[["string"]]]}],"returns":[[["MongoDB"]]],"meta":{"line":672,"file":"MongoDB.js","path":"src/base"}},{"name":"exportToQuickDB","description":"This method exports **MongoDB** data to **Quick.db**","examples":["//Exports to Quick.db\rdb.exportToQuickDB(QuickDB)"],"params":[{"name":"QuickDB","description":"Quick.db database (class)","type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":686,"file":"MongoDB.js","path":"src/base"}},{"name":"updateModel","description":"Updates this current model (database) and uses a new one.","params":[{"name":"name","description":"The new model name to use.","type":[[["string"]]]}],"returns":[[["MongooseDocument"]]],"meta":{"line":700,"file":"MongoDB.js","path":"src/base"}},{"name":"toString","description":"String representation of the database.","examples":["//Expected: 'Up-Devs.DB< ... >'\rconsole.log(db.toString());"],"returns":[[["string"]]],"meta":{"line":712,"file":"MongoDB.js","path":"src/base"}},{"name":"_eval","description":"Eval this database and do whatever you want. You can use `this` keyword.","examples":["//Consoles every single data\rdb._eval(\"console.log(this.all())\")"],"params":[{"name":"code","description":"The code to eval","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":724,"file":"MongoDB.js","path":"src/base"}}],"events":[{"name":"ready","description":"Emitted whenever the database is ready to work.","params":[{"name":"database","description":"The database that this event happened.","type":[[["MongoDB"]]]}],"meta":{"line":42,"file":"Constants.js","path":"src/util"}},{"name":"error","description":"Emitted whenever an error is returned.","params":[{"name":"error","description":"The error message which was emitted.","type":[[["Error"]]]},{"name":"database","description":"The database that this was emitted.","type":[[["MongoDB"]]]}],"meta":{"line":51,"file":"Constants.js","path":"src/util"}},{"name":"debug","description":"Emitted whenever a debug event happens.","params":[{"name":"message","description":"The debug message which was emitted.","type":[[["string"]]]},{"name":"database","description":"The database that this event was emitted.","type":[[["MongoDB"]]]}],"meta":{"line":62,"file":"Constants.js","path":"src/util"}}],"meta":{"line":17,"file":"MongoDB.js","path":"src/base"}},{"name":"DBData","description":"Represents a database data.","construct":{"name":"DBData","description":"Represents a database data.","params":[{"name":"key","description":"This data's key that was set with.","type":[[["string"]]]},{"name":"data","description":"This data that was set with this key.","type":[[["any"]]]}]},"props":[{"name":"ID","description":"This data's ID that was set with.","type":[[["string"]]],"meta":{"line":17,"file":"DBData.js","path":"src/manager"}},{"name":"data","description":"This data's data.","type":[[["any"]]],"meta":{"line":23,"file":"DBData.js","path":"src/manager"}}],"meta":{"line":4,"file":"DBData.js","path":"src/manager"}},{"name":"Events","description":"Emits an event for Up-Devs.DB","access":"private","construct":{"name":"Events","description":"Emits an event with this constructor.","params":[{"name":"eventType","description":"The event type for this event.","type":[[["string"]]]},{"name":"message","description":"The message that was emitted.","type":[[["string"]]]},{"name":"database","description":"The database that this was emitted.","type":[[["JsonDB"]],[["MongoDB"]]]}]},"meta":{"line":11,"file":"Events.js","path":"src/manager"}},{"name":"Colorful","description":"Makes your console colorful","access":"private","construct":{"name":"Colorful","description":"Colorful stuff and options.","params":[{"name":"text","description":"The text that you want to make colorful.","type":[[["string"]]]}]},"props":[{"name":"colorfulText","description":"The colorful console text that was generated.","access":"private","type":[[["string"]]],"meta":{"line":23,"file":"Colorful.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"Returns this colorful console message as a string.","returns":[[["string"]]],"meta":{"line":40,"file":"Colorful.js","path":"src/structures"}}],"meta":{"line":7,"file":"Colorful.js","path":"src/structures"}},{"name":"Util","description":"Up-Devs.DB's utilities. **Every method of this class is a `static` method.**","methods":[{"name":"isKey","description":"Checks if this key is valid.","scope":"static","params":[{"name":"key","description":"The key to check.","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":16,"file":"Util.js","path":"src/util"}},{"name":"isValue","description":"Checks if this data is valid.","scope":"static","params":[{"name":"data","description":"The data to check.","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"Util.js","path":"src/util"}},{"name":"parseKey","description":"Returns the target and the key from this key.","scope":"static","examples":["//Parsing this key.\rUtil.parseKey(\"hello.world\");"],"params":[{"name":"key","description":"The key to parse.","type":[[["string"]]]}],"returns":[[["MongoKey"]]],"meta":{"line":40,"file":"Util.js","path":"src/util"}},{"name":"sort","description":"Sorts this data.","scope":"static","examples":["//Sorting datas.\rUtil.sort(\"youtube_\", { ... }, { sort: \".data\" });"],"params":[{"name":"key","description":"The key for sorting.","type":[[["string"]]]},{"name":"data","description":"The datas for sorting.","type":[[["Array"]]]},{"name":"options","description":"Sorting options.","type":[[["Object"]]]}],"returns":[[["Array","<"],["any",">"]]],"meta":{"line":61,"file":"Util.js","path":"src/util"}},{"name":"setData","description":"Sets a data to Lodash.","scope":"static","examples":["//Sets a data to Lodash\rUtil.setData(\"hello.world\", { ... }, [\"nodejs\"]);"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]},{"name":"data","description":"The data that will be set.","type":[[["any"]]]},{"name":"value","description":"The value that will be set.","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":82,"file":"Util.js","path":"src/util"}},{"name":"unsetData","description":"Unsets this data.","scope":"static","examples":["//Unsets this data\rUtil.unsetData(\"user.items\", {...});"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]},{"name":"data","description":"The data to unset","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":99,"file":"Util.js","path":"src/util"}},{"name":"getData","description":"Returns the data saved with this key.","scope":"static","examples":["//Returns this data\rUtil.getData(\"countries\", { ... });"],"params":[{"name":"key","description":"The key for this value.","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":118,"file":"Util.js","path":"src/util"}}],"meta":{"line":9,"file":"Util.js","path":"src/util"}}],"interfaces":[],"typedefs":[{"name":"JsonDBOptions","description":"Json database options.","type":[[["Object"]]],"params":[{"name":"consoleEvents","description":"Should the events that emitted should be logged in the console?","type":[[["boolean"]]]}],"meta":{"line":19,"file":"JsonDB.js","path":"src/base"}},{"name":"MongoDBOptions","description":"Mongo database options.","type":[[["Object"]]],"params":[{"name":"consoleEvents","description":"Should the events that emitted should be logged in the console?","type":[[["boolean"]]]}],"meta":{"line":19,"file":"MongoDB.js","path":"src/base"}},{"name":"MathOperator","description":"The math operators that you can use.\r* `+`: addition\r* `-`: subtraction\r* `*`: multiplication\r* `/`: divide\r* `%`: percent","type":[[["string"]]],"meta":{"line":4,"file":"Constants.js","path":"src/util"}},{"name":"MongoConnectionState","description":"MongoDB connection states.\r* `DISCONNECTED`\r* `CONNECTED`\r* `CONNECTING`\r* `DISCONNECTING`","type":[[["string"]]],"meta":{"line":14,"file":"Constants.js","path":"src/util"}},{"name":"DatabaseLatency","type":[[["Object"]]],"props":[{"name":"read","description":"This database's read latency.","type":[[["number"]]]},{"name":"write","description":"This database's write latency.","type":[[["number"]]]},{"name":"average","description":"This database's average latency.","type":[[["number"]]]}],"meta":{"line":23,"file":"Constants.js","path":"src/util"}},{"name":"MongoKey","type":[[["Object"]]],"props":[{"name":"key","description":"Parsed Key","type":[[["string"]],[["void"]]]},{"name":"target","description":"Parsed target","type":[[["string"]],[["void"]]]}],"meta":{"line":30,"file":"Constants.js","path":"src/util"}}],"externals":[]}